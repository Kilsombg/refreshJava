package su.su13;

/* За програмиране на сървъри е известен шаблона, при който за всеки свързал се клиент се създава
отделна нишка:
while (true)
{
Socket client = serverSocket.accept();
Thread clientThread = new Thread(new ServerRunnable(client));
clientThread.start();
}
Предимството от многонишковото програмиране в този случай е, че не е необходимо клиентите
да се изчакват. Сървърът може да обслужва по няколко едновременно посредством нишките.
Този подход има и известни недостатъци. Нишките постигат паралелизъм като изпълняват
задачите си на отделните ядра на процесора. Тъй като процесорът е хардуерно устройство, то не
може да се управлява от потребителска програма. Създаването, изпълнението и унищожаването
на нишките се контролира от операционната система. Стартирането дори на една нишка е
сравнително бавна операция.
Друг недостатък е, че на всяка нишка са необходими определени системни ресурси, за да
извършва своята работа. При свързване на голям брой клиенти в горния пример е напълно
възможно ресурсите на сървъра да се изчерпат и да възникне грешка като OutOfMemoryError.
В повечето случаи е по-оптимално да се създаде контролиран брой нишки в началото на
изпълнението и те да се преизползват за клиентските задачи. Такова преизползване на набор от
обекти е известен шаблон в ООП – Object Pool. Класът за създаване на Thread Pool в Java е
ExecutorService.
С Thread Pool кодът на сървъра за управление на нишките има следния вид:
ExecutorService pool = Executors.newFixedThreadPool(nThreads);
while (true)
{
Socket client = serverSocket.accept();
pool.execute(new ServerRunnable(client));
}
Където nThreads е броят на нишките, които ще се създадат. Предимствата са, че нишките се
създават още преди свързването на клиентите и съответно има по-малко забавяне. Също така,
може да се контролира използването на хардуерните ресурси на сървъра, за да не се стигне до
претоварване.

Задача:
Разгледайте следния код на многонишково клиент/сървър чат приложение:
https://pastebin.com/557E9Bdy
Модифицирайте примера така, че да се допускат само до 3 клиенти в чата. Използвайте Thread
Pool с фиксиран брой нишки.
 */